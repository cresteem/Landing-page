{"/comprehensive-faq-for-hawk-js":{"title":"Exploring Hawk JS: Frequently Asked Questions","data":{"":"What is Hawk JS?\nHawk JS is a tool for generating and deploying sitemaps and update content link to search engines for websites. It supports automatic submission to search engines such as Google, Bing, Yahoo, Yandex, and others, ensuring your website content is indexed quickly and efficiently.\nHow do I install Hawk JS?\nYou can install Hawk JS using npm or yarn. Run npm install @cresteem/hawk-js or yarn add @cresteem/hawk-js in your project directory.\nHow do I configure Hawk JS for my project?\nYou can configure Hawk JS by creating a hawk.config.json file in the root directory of your project. This file includes settings such as lookup patterns, ignore patterns, timezone, domain name, sitemap path, robot path, and secret file.\nWhich search engines are supported by Hawk JS?\nHawk JS supports submission to multiple search engines, including Google, Bing, Yahoo, Yandex, and others that support the IndexNow protocol.\nWhat are lookup and ignore patterns in Hawk JS?\nLookup patterns specify the files to be included when generating the sitemap, while ignore patterns specify the files to be excluded. These patterns help customize which parts of your website are indexed.\nWhen should I use the Google Indexing API strategy?\nThe Google Indexing API strategy is ideal for sites with frequently changing content, such as job postings or live stream events. This strategy allows you to notify Google directly when pages are added or removed, ensuring timely updates to search results.\nHow do I generate a sitemap using Hawk JS?\nYou can generate a sitemap by running the Hawk JS CLI command hawk genmap. This will create a sitemap.xml file based on your configuration settings.\nCan I exclude certain files from the sitemap?\nYes, you can exclude certain files from the sitemap by specifying ignore patterns in the hawk.config.json file. These patterns will be used to filter out files that should not be included in the sitemap.\nWhat is the purpose of the getLastRunTimeStamp function?\nThe getLastRunTimeStamp function retrieves the timestamp of the last execution or submission. This is useful for filtering updated routes from non-updated routes using the lastRunTimeStamp.\nHow do I use the IndexNow strategy with Hawk JS?\nTo use the IndexNow strategy, configure your routes and run hawk with the IndexNow strategy. This will rapidly index your new or updated content with search engines that support IndexNow, such as Bing, Yahoo, Yandex, and Yep.\nWhat is the difference between Google Search Console API and Google Indexing API?\nThe Google Search Console API is used for submitting sitemaps to Google and checking their status, while the Google Indexing API is specifically for notifying Google about updates to pages with certain types of content, like job postings or live stream events.\nCan I check the status of my sitemap submissions?\nYes, you can check the status of your sitemap submissions to Google Search Console using the lastSubmissionStatusGAPI function provided by Hawk JS. This function retrieves and displays the status of the last submission.\nHow do I generate and upload a sitemap using the CLI?\nTo generate and upload a sitemap using the CLI, run hawk genmap -c. This will generate the sitemap and upload it to Google Search Console.\nWhat are the supported strategies in Hawk JS?\nHawk JS supports several strategies for sitemap generation and submission: IndexNow, GIndex, GWebmaster, and GWebmaster2. Each strategy serves different purposes based on your content and target search engines.\nHow does Hawk JS handle route changes?\nHawk JS identifies routes with changes since the last submission timestamp using given inclusion and exclusion patterns. This ensures only updated content is submitted for indexing.\nHow can I update the sitemap without uploading it?\nYou can update the sitemap without uploading it by setting the donotUpload option to true in your configuration or CLI command. This will generate the sitemap but skip the upload step.\nWhat is the purpose of the makeRobot function?\nThe makeRobot function generates a robots.txt file that helps search engines understand which parts of your site should be crawled and indexed.\nCan Hawk JS be used with any website?\nYes, Hawk JS can be used with any website, As long as you have node-js environment and can configure the necessary settings and run the CLI commands, Hawk JS will work for your site.\nWhy are FTP credentials necessary for submitting a sitemap when using gWebmaster or gWebmaster2 strategies?\nFTP (File Transfer Protocol) credentials such as hostname, username, and password are required when using gWebmaster or gWebmaster2 strategies in Hawk JS to submit the sitemap directly to FTP server for Google Search Console to utillise and index your website.\nWhere should I store my FTP credentials for Hawk JS?\nFTP credentials should be securely stored in the secrets.json file should be located in your project's root directory. This file is used by Hawk JS(yarn hawk secret) to set credentials to system environment so that can used when need to access and authenticate with the FTP server when uploading the sitemap.\nWhy is a Google service account key necessary for GIndex and GWebmaster strategies?\nA Google service account key is required for GIndex and GWebmaster strategies in Hawk JS to authenticate and access the Google APIs for indexing and sitemap submission. This key ensures secure communication between Hawk JS and Google services.\nWhere do I acquire a Google service account key?\nYou can acquire a Google service account key from the Google Cloud Console. Navigate to the IAM & Admin section, select Service accounts, and create a new service account. Download the JSON key file provided, which contains your service account credentials. It should be stored as gserv.json in project root directory.\nDo I need to enable specific APIs in Google Cloud Console for Hawk JS?\nYes, you need to enable specific APIs such as the Google Indexing API and Google Search Console API in the Google Cloud Console for Hawk JS to interact with these services. Ensure that the required APIs are enabled and access permissions are correctly configured.\nKeywords:\nIntegration process\nstrategies and techniques\nwebsite optimization"}},"/effective-indexing-with-hawk-js":{"title":"Hawk JS's Comprehensive Approach to Search Engine Indexing","data":{"":"Hawk JS supports several strategies to ensure your website is effectively indexed by major search engines. Below are the available strategies and when to use them:","1-indexnow#1. IndexNow":"Overview:\r\nIndexNow is a protocol that allows webmasters to notify search engines about content changes instantly. This ensures search engines always have the latest information about your site.When to Use:\r\nUse IndexNow when you need rapid indexing of new or updated content, ensuring minimal delay between content changes and search engine visibility. However, note that not all search engines support the IndexNow protocol. Currently, popular search engines like Bing, Yahoo, Yandex, and Yep support IndexNow. Therefore, before using this strategy, verify if the search engine you are targeting is supported. Will see more about how to work with it in CLI References and API references.","2-google-indexing-api#2. Google Indexing API":"Google service account's credential is required. Follow Credential page.\nOverview:\r\nThe Google Indexing API enables website owners to directly notify Google of new page additions or removals. This capability allows Google to schedule fresh crawls, potentially increasing the quality and relevance of user traffic. Currently, the Indexing API is specifically designed for pages containing JobPosting or BroadcastEvent embedded in a VideoObject.When to Use:\r\nIt is particularly beneficial for websites with frequently updated, short-lived content such as job postings or livestream videos. By utilizing the Indexing API, updates can be efficiently pushed to Google, ensuring that content remains current and visible in search results.","3-google-search-console-api#3. Google Search Console API":"Google service account's credential is required. Follow Credential page.\nOverview:\r\nThe Google Search Console API provides a method for managing your website's presence in Google Search results. This API is particularly useful for webmasters and developers who need to automate tasks related to sitemap submission and monitoring.When to Use:\nFallback Option: When the search engine you are targeting does not support the IndexNow protocol or when your content does not qualify for the Google Indexing API.\nTraditional Sitemap Submission: Use this strategy to generate a sitemap for your website and submit it automatically through this strategy.\nMonitoring Indexing Status: It allows you to track the indexing status of your web pages and receive insights into how Google crawls and indexes your site.\nLet's see how to configure!\nKeywords:\nIndexNow\nGoogle Indexing API\nGoogle Search Console API"}},"/enhancing-seo-with-hawk-js-cli":{"title":"Maximizing SEO with Hawk JS: CLI Commands and Strategies","data":{"":"The Hawk JS CLI tool empowers you to manage and optimize sitemaps for enhanced SEO performance. It supports multiple strategies (GIndex, IndexNow, GWebmaster, GWebmaster2) not only for generating and submitting sitemaps but also for updating and ensuring the inclusion of recently updated content. Use options to define inclusion and exclusion patterns for files, ensuring precise control over which content is indexed.Notes\nEnsure your hawk.config.json is configured properly for advanced settings.\nUse -h or --help with any command to get detailed usage information.\nThis structured reference guide provides users with clear instructions on how to use Hawk JS from the command line, covering various commands, options, and examples for effective sitemap management and submission.","usage#Usage":"hawk [options] [command]","options#Options":"-s, --strategy <strategy>: Strategy to use (GIndex, IndexNow, GWebmaster, GWebmaster2).\nDefault is IndexNow.Optional:\n-i, --include <pattern>: Include pattern for file selection.\n-e, --exclude <pattern>: Exclude pattern for file selection.\n-p, --prettify: Prettify sitemap.xml output. Default is false.","commands#Commands":"","genmap-options#genmap [options]":"Generate sitemap.xml and optionally upload to Google Search Console.Options:All are optional nothing mandatory.\n-c, --commit: Upload generated sitemap to Google Search Console and FTP server.\n-i, --include <pattern>: Include pattern for file selection.\n-e, --exclude <pattern>: Exclude pattern for file selection.\n-p, --prettify: Prettify sitemap.xml output. Default is false.","secret#secret":"Set FTP credentials from secrets.json to the system environment.","examples#Examples":"","set-secret-credentials#Set Secret Credentials:":"yarn hawk secret\nnpx hawk secret","generate-sitemap-only#Generate Sitemap Only:":"yarn hawk genmap\nnpx hawk genmap","generate-and-upload-sitemap-to-google-search-console-and-ftp#Generate and Upload Sitemap to Google Search Console and FTP:":"yarn hawk genmap -c\nnpx hawk genmap -c","submit-updated-link-to-search-engines-using-indexnow-strategy#Submit Updated Link to Search Engines Using IndexNow Strategy:":"yarn hawk -s IndexNow\nnpx hawk -s IndexNow","submit-updated-link-to-google-using-gindex-strategy#Submit Updated Link to Google Using GIndex Strategy:":"Google service account's credential is required. Follow Credential page.\nyarn hawk -s GIndex\nnpx hawk -s GIndex","generate-and-upload-sitemap-using-gwebmaster-strategy#Generate and Upload Sitemap Using GWebmaster Strategy:":"Google service account's credential is required. Follow Credential page.\nyarn hawk -s GWebmaster\nnpx hawk -s GWebmaster","generate-and-upload-sitemap-using-gwebmaster2-strategy#Generate and Upload Sitemap Using GWebmaster2 Strategy:":"Google service account's credential is required. Follow Credential page.\nIt check for status of submission in addition to GWebmaster strategy\nyarn hawk -s GWebmaster2\nnpx hawk -s GWebmaster2\nLet's get into API!\nKeywords:\nCLI reference guide\ncommand line interface\nsitemap management"}},"/exploring-hawk-js-api-functions":{"title":"Exploring Hawk JS API: A Comprehensive Reference","data":{"hawk#hawk":"hawk ( )","hawkstrategy#hawkStrategy":"hawkStrategy.indexNow ( )\nhawkStrategy.gIndex ( )\nhawkStrategy.gWebmaster ( )\nhawkStrategy.gWebmaster2 ( )","utilities#utilities":"getLastRunTimeStamp ( )\ngetUpdatedRoutesPath ( )\nmakeRobot ( )\nmakeSitemap ( )\n_makeSitemapRobot ( )\nlastSubmissionStatusGAPI ( )\nLet's delve deeper into API!\nKeywords:\nSearch engine optimization API\ndeveloper guide"}},"/exploring-hawk-js-api-functions/hawk":{"title":"Hawk JS: The Secret to Efficient SEO Strategy Implementation","data":{"":"The hawk() function is the central part of Hawk JS, used for generating and submitting sitemaps or updated route links based on various SEO strategies. It automates the handling of updated routes and manages the sitemap generation and submission process.","function-signature#Function Signature":"async function hawk(\r\n  strategy: suppotredStrategies,\r\n  lookupPatterns: string[] = [],\r\n  ignorePattern: string[] = [],\r\n  prettify: boolean = true\r\n): Promise<void>","parameters-and-explanation#Parameters and Explanation":"strategy (suppotredStrategies): The strategy to use for submission. Options include GIndex, IndexNow, GWebmaster, and GWebmaster2.\nlookupPatterns (string[]): Patterns to specify which files to include in the sitemap generation and updated routes lookup.\nignorePattern (string[]): Patterns to specify which files to exclude from the sitemap generation and updated routes lookup.\nprettify (boolean): Flag to format the sitemap for readability. Default is true.","example-usage#Example Usage":"import { hawk } from '@cresteem/hawk-js';\r\n\r\nasync function main() {\r\n  const strategy = 'GWebmaster2'; // Choose your strategy\r\n  const lookupPatterns = ['**/*.html'];\r\n  const ignorePattern = ['node_modules/**'];\r\n  const prettify = true;\r\n\r\n  try {\r\n    await hawk(strategy, lookupPatterns, ignorePattern, prettify);\r\n    console.log('Sitemap generated and submitted successfully.');\r\n  } catch (err) {\r\n    console.error('Error:', err);\r\n  }\r\n}\r\n\r\nmain();\nKeywords:\nopen-source tools\nwebsite indexing\nsearch engine optimization"}},"/exploring-hawk-js-api-functions/hawkstrategy":{"title":"Hawk JS: Mastering Search Engine Indexing with hawkStrategy","data":{"":"The hawkStrategy object in Hawk JS provides different strategies for generating and submitting sitemaps or updated route links to various search engines. It includes methods for handling different protocols and APIs, ensuring your website's content is efficiently indexed.","strategies#Strategies":"","1indexnow#1.indexNow":"Signature:\nindexNow: async (routes: string[]) => { ... }\nDescription:Uses the IndexNow protocol to quickly index specified routes on search engines like Bing, Yahoo, Yandex, and Yep.Example:\nawait hawkStrategy.indexNow(['www.abc.com/updatedRoute1', 'www.abc.com/updatedRoute2']);","2gindex#2.gIndex":"Google service account's credential is required. Follow Credential page.\nSignature:\ngIndex: async (routes: string[]) => { ... }\nDescription:Submits specified routes to Google using the Google Indexing API, ideal for pages with JobPosting or Livestream Broadcasting content.Example:\nawait hawkStrategy.gIndex(['www.abc.com/updatedRoute1', 'www.abc.com/updatedRoute2']);","3gwebmaster#3.gWebmaster":"Google service account's credential is required. Follow Credential page.\nSignature:\ngWebmaster: async (\r\n  prettify: boolean = true,\r\n  lookupPatterns: string[] = [],\r\n  ignorePattern: string[] = []\r\n) => { ... }\nDescription:Generates sitemap.xml and submits it to Google Search Console. This strategy is suitable for all types of websites.Example:\nawait hawkStrategy.gWebmaster(true, ['**/*.html'], ['node_modules/**']);","4gwebmaster2#4.gWebmaster2":"Google service account's credential is required. Follow Credential page.\nSignature:\ngWebmaster2: async (\r\n  prettify: boolean = true,\r\n  lookupPatterns: string[] = [],\r\n  ignorePattern: string[] = []\r\n) => { ... }\nDescription:Similar to gWebmaster, but also checks the submission status after uploading the sitemap to Google Search Console.Example:\nawait hawkStrategy.gWebmaster2(true, ['**/*.html'], ['node_modules/**']);","usage#Usage":"Each strategy function can be used independently to handle specific SEO tasks. They provide flexibility in how sitemaps are generated and submitted, ensuring that your content is kept up-to-date across different search engines.","conclusion#Conclusion":"The hawkStrategy object in Hawk JS offers a range of powerful strategies to help you manage your website’s SEO efficiently. By leveraging these strategies, you can ensure your content is indexed quickly and accurately by major search engines.\nKeywords:\nwebsite indexing\ncontent visibility\nsearch engines\nbing\ngoogle"}},"/exploring-hawk-js-api-functions/utils":{"title":"Exploring the utilities Object in Hawk JS for SEO Automation","data":{"":"The utilities object in Hawk JS provides a set of helper functions to assist with the sitemap generation and submission processes. These functions support various aspects of managing and tracking sitemaps and their submission status.","functions#Functions":"","1lastsubmissionstatusgapi#1.lastSubmissionStatusGAPI":"Signature:\nlastSubmissionStatusGAPI(): Promise<sitemapMetaOptions>\nDescription:Retrieves the status of the last sitemap submission to Google Search Console.Example:\nconst status = await utilities.lastSubmissionStatusGAPI();\r\nconsole.log(status);","2getupdatedroutespath#2.getUpdatedRoutesPath":"Signature:\ngetUpdatedRoutesPath(lastRunTimeStamp: number, lookupPatterns: string[], ignorePattern: string[]): string[]\nDescription:Detects routes that have been modified since the last submission, using specified inclusion and exclusion patterns.Example:\nconst updatedRoutes = utilities.getUpdatedRoutesPath(lastRunTimeStamp, ['**/*.html'], ['node_modules/**']);\r\nconsole.log(updatedRoutes);","3makerobot#3.makeRobot":"Signature:\nmakeRobot(): string\nDescription:Generates a robots.txt file for SEO directives.Example:\nconst robotStatus = utilities.makeRobot();\r\nconsole.log(robotStatus);","4makesitemap#4.makeSitemap":"Signature:\nmakeSitemap(prettify: boolean, lookupPatterns: string[], ignorePattern: string[],donotUpload:boolean=false): Promise<string>\nDescription:Creates a sitemap.xml file using specified prettification and file patterns. Set donotUpload to true to prevent FTP uploading.Example:\nconst donotUpload = true;\r\nconst sitemapStatus = await utilities.makeSitemap(true, ['**/*.html'], ['node_modules/**'],donotUpload);\r\nconsole.log(sitemapStatus);","5getlastruntimestamp#5.getLastRunTimeStamp":"Signature:\ngetLastRunTimeStamp(): number\nDescription:Retrieves the timestamp of the last execution or submission for comparison. This is useful for filtering updated routes from non-updated routes using lastRunTimeStamp.Example:\nconst lastRun = utilities.getLastRunTimeStamp();\r\nconsole.log(lastRun);\r\nconst updatedRoutes = getUpdatedRoutesPath(lastRun);","6_makesitemaprobot#6._makeSitemapRobot":"Signature:\n_makeSitemapRobot(prettify: boolean, lookupPatterns: string[], ignorePattern: string[]): Promise<void>\nDescription:An internal function that combines the functionalities of makeSitemap and makeRobot to create both sitemap.xml and robots.txt.Example:\nawait utilities._makeSitemapRobot(true, ['**/*.html'], ['node_modules/**']);","usage#Usage":"These utility functions provide essential support for managing sitemaps and ensuring they are up-to-date and properly submitted to search engines. They help automate tasks and streamline the sitemap management process.","conclusion#Conclusion":"The utilities object in Hawk JS offers a comprehensive set of tools to aid in the creation, management, and submission of sitemaps. By utilizing these utilities, developers can enhance the efficiency and accuracy of their website's SEO processes.\nKeywords:\nhawk js\nutilities object\nsitemap generation\nseo automation\nhelper functions"}},"/get-involved-with-hawk-js-open-source":{"title":"Hawk JS Open-Source Project: How to Get Involved","data":{"":"First off, thank you for considering contributing to HAWK JS! We welcome contributions from the community.","license-agreement#License Agreement":"By contributing to this project, you agree that your contributions will be licensed under the Apache License, Version 2.0. This means that any code or documentation you submit will be covered by the same license as the rest of the project.","how-to-contribute#How to Contribute":"Fork the repository.\nCreate a new branch for your feature or bugfix.\nMake your changes in the new branch.\nSubmit a pull request to the main repository.\nPlease ensure that your contributions adhere to our coding standards and include appropriate tests.","contact#Contact":"For any question kindly reach out us in telegram channel or mail to us connect@cresteem.com\nKeywords:\nContributing guide\nopen-source project\nSEO tool improvement"}},"/getting-started-with-hawk-js":{"title":"Getting Started with Hawk JS: A Step-by-Step Guide","data":{"prerequisite#Prerequisite":"To use Hawk JS, you will need the following prerequisites:\nNode.js (v18.0 or later) installed on your system. You can download it from\r\nhttps://nodejs.org/en/download.\nNPM (Node Package Manager) or YARN should be installed along with Node.js.\nInternet to install Hawk JS from npm registry.\nOnce you have these prerequisites in place, you can follow the installation steps in the project's documentation\r\nto set up and run the project on your local machine.","installation#Installation":"npm install -D @cresteem/hawk-js\npnpm add -D @cresteem/hawk-js\nyarn add --dev @cresteem/hawk-js\nbun add --dev @cresteem/hawk-js\nYou are almost ready to use Hawk JS. Next, we will explore the available strategies and learn how to configure Hawk JS for your own projects.\nLet's see strategies first!\nKeywords:\nSEO tool setup\nenvironment configuration\nweb development"}},"/hawk-js-configuration-settings-guide":{"title":"Customizing Hawk JS: A Guide to Configuration Settings","data":{"lookup-patterns#Lookup Patterns":"\"lookupPatterns\": [\r\n    \"**/*.html\",\r\n    \"**/*.htm\"\r\n]\nDescription: Specifies the patterns used by Hawk JS to search for HTML files within your project.\nUsage: Customize the patterns to match the file types or locations where your HTML content resides.","ignore-pattern#Ignore Pattern":"\"ignorePattern\": [\r\n    \"node_modules/**\"\r\n]\nDescription: Defines a pattern to exclude specific directories or files from being included in the sitemap generation process.\nUsage: Adjust the pattern to exclude folders or files that are not relevant for sitemap creation, such as node_modules or build directories.","timezone#Timezone":"\"timeZone\": \"Asia/Kolkata\"\nDescription: Sets the timezone for file modification times in Hawk JS.\nUsage: Specify the timezone based on your project's location or operational requirements. This ensures accurate handling of time-related data during sitemap generation and other processes.","domain-name#Domain Name":"\"domainName\": \"www.example.com\"\nDescription: Specifies the domain name of your website.\nUsage: Replace www.example.com with your actual domain name to generate accurate URLs in the sitemap.","sitemap-path#Sitemap Path":"\"sitemapPath\": \"sitemap.xml\"\nDescription: Defines the path and filename for the generated sitemap file.\nUsage: Customize sitemap.xml to specify where Hawk JS should output the sitemap file within your project directory structure.","secret-file#Secret File":"\"secretFile\": \"secrets.json\"\nDescription: Points to a JSON file containing sensitive information such as ftp username, password, and hostname.\nUsage: Update secrets.json with the necessary credentials or secrets needed for authenticating with FTP server for sitemap and api key deployment.","secret-file-structure#Secret file structure":"{\r\n\thost: \"ftp.hostname.com\";\r\n\tuser: \"username\";\r\n\tpass: \"password\";\r\n}","how-to-configure-hawk-js#How to Configure Hawk JS":"","create-hawkconfigjson#Create hawk.config.json":"Create and open the hawk.config.json file in the root directory of your project.","configure-settings#Configure Settings":"Adjust the values of each configuration setting based on your project requirements and specifications.","save-changes#Save Changes":"Save the updated hawk.config.json file to apply the new configuration settings to Hawk JS.\nBy configuring these settings in hawk.config.json, you can customize Hawk JS to meet the specific needs of your website, ensuring accurate sitemap generation and effective management of tasks.\nLet's see how to Obtain Credential\nKeywords:\nConfiguration settings\nhawk.config.json\ncustomization"}},"/hawk-js-demonstration-repository":{"title":"Exploring Hawk JS: A Hands-on Demonstration","data":{"":"You can find fabricated Demo and configuration files for demonstration in this GitHub repository. Clone this repository to your local machine to experiment with configurations to understand how Hawk JS works. This hands-on approach will help you better grasp the functionalities and integration of Hawk JS.","clone-demonstration-repository#Clone demonstration repository":"git clone https://github.com/cresteem/Hawk JS-Demo.git","repositorys-structure#Repository's structure":"You can explore these file structure by clicking on the folder you want to explore.\nKeywords:\nDemonstration repository\nhands-on learning\nexperimentation"}},"/":{"title":"Introducing Hawk JS: Supercharge Your Website's SEO","data":{"":"Welcome to the Hawk JS Documentation Site!Whether you're a beginner or an expert, our documentation will guide you through using Hawk JS to enhance your site's SEO.Start exploring by selecting a section from the menu.","what-is-hawk-js#What is Hawk JS?":"Hawk JS is an advanced sitemap generator and deployer designed to enhance your website's search engine optimization (SEO). It automates the creation of comprehensive sitemaps and simplifies the submission process to major search engines, including Google, Bing, Yahoo, Yandex, Yep, and IndexNow supported search engines. Hawk JS is built to serve web developers, SEO enthusiasts, and digital marketers, providing an easy-to-use tool that boosts your site's visibility and search engine ranking.","why-use-hawk-js#Why Use Hawk JS?":"Using Hawk JS offers several advantages:\nAutomation: Streamline the process of generating and submitting sitemaps, saving time and reducing manual effort.\nSEO Optimization: Ensure your website is indexed by top search engines, improving its visibility and search ranking.\nCustomization: Tailor the sitemap generation to meet your specific needs with advanced configuration options.\nReal-Time Updates: Keep your sitemaps up-to-date with the latest changes to your site, ensuring accurate indexing.\nSupport for Multiple Search Engines: Automatically submit your sitemaps to a variety of search engines, expanding your reach.\nBy using Hawk JS, you can focus on developing and improving your website while Hawk JS handle the complexities of sitemap generation and deployment.","how-to-use-hawk-js#How To use Hawk JS?":"To use Hawk JS, you need to install @cresteem/hawk-js in your node.js environment. Follow Getting Started for instructions. Once installed you can continue here.","configure-it#Configure it":"Configure Hawk JS for your project In hawk.config.json in root level of project directory.\r\nLearn more about in Configurations page.","command-it#Command it":"Fire the terminal in project root directory and command it.\r\nMore about it in CLI References.\n# strategy: [\"GIndex\", \"IndexNow\", \"GWebmaster\", \"GWebmaster2\"]\r\nyarn hawk --strategy GWebmaster --include pages/**.html \n# strategy: [\"GIndex\", \"IndexNow\", \"GWebmaster\", \"GWebmaster2\"]\r\nnpx hawk --strategy GWebmaster --include pages/**.html","author--license#Author & License":"Hawk JS is an open-source project developed and maintained by  DARSAN at CRESTEEM, a leading web development company. It is licensed under the Apache 2.0 license, allowing you to use it freely for both personal and commercial projects. However, please ensure you provide proper attribution in accordance with the license terms when using Richie JS in your project.To contribute to this project or report any issues, please visit the project's GitHub repository at\r\nhttps://github.com/cresteem/hawk-js. The community is always welcoming new contributions and feedback.\nLet's get started!\nKeywords:\nHawk JS\nsitemap generator\nSEO optimization\nsearch engine submission"}},"/obtaining-google-credentials-for-hawk-js":{"title":"Obtaining Google Credentials for Hawk JS: A Step-by-Step Guide","data":{"google-service-account-credentials-for-gwebmaster-gwebmaster2-and-gindex#Google Service Account Credentials for GWebmaster, GWebmaster2 and GIndex.":"","prerequisites#Prerequisites":"Before you begin, ensure you have the following:\nA Google account\nAccess to the Google Cloud Console\nAdmin access to your Google Search Console property","step-by-step-instructions#Step-by-Step Instructions":"","step-1-create-a-new-project-in-google-cloud-console#Step 1: Create a New Project in Google Cloud Console":"Go to the Google Cloud Console: Open Google Cloud Console.\nCreate a New Project:\nClick on the project dropdown at the top left of the page.\nSelect \"New Project\".\nEnter a name for your project and click \"Create\".","step-2-enable-the-required-apis#Step 2: Enable the Required APIs":"Navigate to the API & Services Dashboard:\nFrom the left-hand navigation menu, go to APIs & Services > Dashboard.\nEnable the Indexing API:\r\nClick Enable APIs and Services at the top.\nSearch for \"Indexing API\" and click on it.\nClick Enable.\nEnable the Search Console API:\r\nRepeat the above steps to search for \"Search Console API\".\nClick on it and click Enable.","step-3-create-a-service-account#Step 3: Create a Service Account":"Navigate to the Service Accounts Page:\nGo to IAM & Admin > Service Accounts.\nCreate a Service Account:\nClick + Create Service Account.\nEnter a name and description for the service account, then click Create.\nGrant the Service Account Permissions:\nIn the \"Grant this service account access to project\" section, add the role Owner.\nClick Continue, then Done.","step-4-generate-and-download-the-json-key#Step 4: Generate and Download the JSON Key":"Create Key for Service Account:\nFind your service account in the list and click on its email.\nGo to the Keys tab.\nClick Add Key > Create New Key.\nSelect JSON and click Create. This will download a JSON file containing your credentials. Store this file securely as gserv.json in your web project root directory so Hawk JS will use it for API authentication.","step-5-add-service-account-to-google-search-console#Step 5: Add Service Account to Google Search Console":"Open Google Search Console: Go to Google Search Console.\nAdd the Service Account as an Owner:\nSelect your property in Google Search Console.\nGo to Settings > Users and permissions > Add user.\nEnter the email address of your service account and select the role Owner.\nClick Add.\nBy following these steps, you should be able to successfully obtain and configure service account credentials for accessing the Google Indexing API and Google Search Console API. For any issues or further assistance, refer to the Google Cloud Console Documentation and Google Search Console Help.\nLet's see how to fire up with CLI!\nKeywords:\nSearch Console API\nIndexing API\nservice account setup"}},"/video":{"title":"Video","data":{"":"The video has not been published yet"}}}